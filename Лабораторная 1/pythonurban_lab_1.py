# -*- coding: utf-8 -*-
"""Копия блокнота "PythonUrban_lab_1.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xgbPah3Q3lG56Om4EubWdlpHKJk27pfS

## list comprehension

### Обработка каждого элемента
"""

cart = [3, 4, 12, 17, 19, 21, 23, 26, 30]

cashier = []  # новый список с помощью метода append
for item in cart:
    cashier.append(item)
print(cashier)

cashier = [item for item in cart]
print(cashier)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-1.png)

### Фильтрация элементов
"""

cart = [5, 7, 9, 10, 12, 15, 19, 20, 22]

cashier_3 = []
for item in cart:
    if item % 2 == 0:  # только четные
        cashier_3.append(item)
print(cashier_3)

cashier_3 = [item for item in cart if item % 2 == 0]
print(cashier_3)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-2.png)

## Задачи

##### ***Задача 1. Сделать название городов с заглавной буквы.***
Написать функцию task_1, которая будет принимать список названий городов, а возвращать новый список, в котором в каждой строке первая буква будет заглавной, а все остальные строчные.
"""

list_cities = ["москва", "иЖЕВСк Владивосток", "новосибирсК", "мУРМАНСК"]

new_list_cities = list_cities[1].title()

def title(str):
    """ Capitilize first letter of a str"""
    return str.capitalize()

new_list_cities = [title(i) for i in list_cities]  # TODO вызвать функцию и получить новый результат исходного списка list_cities

print(new_list_cities)  # ['Москва', 'Ижевск', 'Владивосток', 'Новосибирск', 'Мурманск']

"""##### ***Задача 2. Отфильтровать города с населением больше 1 млн. человек.***

Написать функцию task_2, которая будет принимать два аргумента список городов и численность населения.  
Функция должна возвращать новый отфильтрованный список городов, где остались города только с население больше 1 млн. человек


"""

list_dict_cities = [
    {
        "name": "Москва",
        "population": 12 * 10 ** 6,
    },
    {
        "name": "Санкт-Петербург",
        "population": 5 * 10 ** 6,
    },
    {
        "name": "Ижевск",
        "population": 0.6 * 10 ** 6,
    },
]

filter_population = 10 ** 6

def cities_filtering(cities_list):
    """Return list with only cities that population is grater than 10^6"""
    return [i["name"] for i in cities_list if i["population"] >  10 ** 6]
      # TODO написать функцию task_2

new_list_dict_cities = cities_filtering(list_dict_cities)  # TODO вызвать функцию и передать в неё значения list_dict_cities и filter_population

print(new_list_dict_cities)  # [{'name': 'Москва', 'population': 12000000}, {'name': 'Санкт-Петербург', 'population': 5000000}]

"""##### ***Задача 3. Найти общие города среди двух групп и отсортировать их в алфавитном порядке.***

Написать функцию task_3, которая будет принимать 2 списка городов, а возвращать новый список, в котором будут города, которые есть в двух группах.  
Результат функции должен быть отсортирован в алфавитном порядке. 

"""

first_group = ["Москва", 'Владивосток', "Санкт-Петербург"]
second_group = ['Новосибирск', "Ижевск", "Санкт-Петербург", "Москва"]

def common_cities (group_1, group_2):  # TODO Написать функцию task_3
    """Filtering common cities from two group"""
    return sorted([i for i in group_1 if i in group_2])

common_cities = common_cities(first_group, second_group)  # TODO вызвать функцию и передать в неё значения fisrt_group и second_group

print(common_cities)  # ['Санкт-Петербург', 'Москва'] - это разве в алфавитном???

"""##### ***Задача 4. Найти количество упоминаний заданного города.***

У списка есть метод `count`, этот метод принимает значение,  
и считает сколько раз он содержится в списке.  

Написать функцию `task_4`, которая принимает два аргумента список городов,  
где нужно искать заданный город.  
И искомый город, количество упоминаний которого нужно подсчитать.
Результатом должно быть количество вхождений города в списке.

Города записанные в разных регистрах, считаются одинаковыми.
"""

list_cities = [  # список городов
    'Новосибирск',
    'Владивосток',
    'Москва',
    'санкт-петербург',
    'Владивосток',
    'Москва',
    'Санкт-Петербург',
    'Москва',
    'Новосибирск',
    'Владивосток',
    'Ижевск',
    'Владивосток',
    'Ижевск',
    'САНКТ-ПЕТЕРБУРГ',
    'Владивосток',
    'Новосибирск',
    'Владивосток',
    'Ижевск',
    'Москва',
    'Санкт-Петербург'
]
find_city = 'Санкт-Петербург'  # искомый город

def counting_cities(sities_list, city_find):  # написать функцию task_4
    """Count number of finding cities"""
    return len([i.lower() for i in sities_list if i.lower() == city_find.lower()])

count_cities = counting_cities(list_cities, find_city)  # TODO вызвать функцию и передать в неё значения list_cities и find_city

print(count_cities)  # 4

"""##### ***Задача 5. Средний индекс озеленения.***

Дан список словарей территорий, где `territory_area` - площадь территории, а `green_zones` список площадей зеленых зон.  
Написать две функции:
- первая будет принимать исходный список городов, и возвращать новый список словарей, в котором для каждой территории посчитан индекс индекс озеленения, как отношение площади зеленых зон к площади территории. Новые словари в списке должен содержать название территории и её индекс озеленения. 
- вторая функция принимает список словарей, в которых посчитаны индексы озеленения для каждой территории и возвращает средний индекс озеленения по всем территориям. 
"""

from os import getgrouplist
list_territories = [
    {
        "territory_name": "Пушкин",
        "territory_area": 28676,
        "green_zones": [302, 487, 420, 325, 471, 363, 404]
    },
    {
        "territory_name": "Павловск",
        "territory_area": 21025,
        "green_zones": [360, 375, 223, 258, 345, 296, 303]
    },
    {
        "territory_name": "Петергоф",
        "territory_area": 44274,
        "green_zones": [364, 447, 438, 223, 336, 431, 442]
    },
]

# TODO написать функцию, которая будет высчитывать индексы озеленения для каждой территории
def green_index(territories_list):
    for i in territories_list:
        i["green_index"] = sum(i.get("green_zones", 0)) / i.get("territory_area") 
    return territories_list

# TODO написать функцию, которая будет высчитывать средний индекс озеленения по всем территориям
def mean_green_class(territories_list):
    return sum([i.get("green_index", 0) for i in territories_list])/len(territories_list)
# TODO распечатать результат округленный до 4 знаков после запятой
print(f"Mean class of landscaping is {mean_green_class(green_index(list_territories)):.4f}")